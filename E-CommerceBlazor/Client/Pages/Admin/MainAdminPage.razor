@page "/admin"
@using E_CommerceBlazor.Client.Services.Abstract;
@using E_CommerceBlazor.Shared.Dto;
@using E_CommerceBlazor.Shared.Model;
@inject IToastService _toastService
@inject IProductService _productService
@inject ICategoryService _categoryService;
@inject IOrderService _orderService
@inject AuthenticationStateProvider _authState
@inject ICouponService _couponService
@inject NavigationManager _navigationManager
@if(Roles == "Admin")
{

    <h3>Kategoriler</h3>
<button class="btn btn-primary" @onclick="AddCategory"> Yeni Kategori ekle</button>

    <table class="table">
        <thead>
            <tr>
                <th scope="col">index</th>
                <th scope="col">katgori ismi</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in categories)
            {
                <tr>
                    <th scope="row">@item.Id</th>
                    <td>@item.Name</td>
                    <td>
                        <button class="btn btn-danger delete-button" @onclick=" () => DeleteCategory(item.Id)               ">
                            <i class="fas fa-trash"></i>
                        </button>
                        <button class="btn btn-danger delete-button" @onclick="() => AddProduct(item.Id)">
                            <i class="fas fa-plus"></i>
                        </button>
                    </td>
                </tr>
            }

        </tbody>
    </table>

    <h3>Kuponlar</h3>
    <button class="btn btn-primary" @onclick="AddCoupon"> Yeni Kupon ekle</button>

    @if(Coupons != null)
    {
   
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">index</th>
                    <th scope="col">indirim</th>
                    <th scope="col">kupon kodu</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Coupons)
                {
                    <tr>
                        <th scope="row">@item.Id</th>
                        <td>@item.Discount</td>
                        <td>@item.Code</td>
                        <td>
                            <button @onclick="() =>DeleteCoupon(item.Id) " class="btn btn-danger delete-button">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    }
    else
    {
        <h3>Görülecek herhangi bir kupon yok henüz</h3>
    }
}
else
{
    <h3>Sorry There is nothing to see at this address</h3>
}













@code {
    string Roles { get; set; } = string.Empty;

    CategoryCreateDTO categoryDTO = new CategoryCreateDTO();

    List<CategoryDto> categories = new List<CategoryDto>();
    List<Order> orders = new List<Order>();
    List<Coupon> Coupons = new List<Coupon>();

    protected override async Task OnInitializedAsync()
    {
        var role = (await _authState.GetAuthenticationStateAsync()).User.Claims
        .FirstOrDefault(x => x.Type == System.Security.Claims.ClaimTypes.Role).Value;

        Roles = role;


        var categoryService =await _categoryService.GetAllCategorries();
        if(categoryService.Success)
        {
            categories = categoryService.Data;
            foreach(var item in categories)
            {
                Console.WriteLine(item);
            }
        }else
        {
            Console.WriteLine("An error occured while trying to get categories");
        }


        var allOrders = await _orderService.GetAllOrders();

        if(allOrders.Success)
        {
            orders = allOrders.Data;
        }
        var coupons = await _couponService.GetAllCoupons();
        if(coupons.Success)
        {
            Coupons = coupons.Data;
        }
    }


    private async Task AddCategory()
    {

        _navigationManager.NavigateTo("/admin/categoryadd");
    }
    private async Task DeleteCategory(int categoryId)
    {

        var result =await _categoryService.DeleteCategory(categoryId);
        if(result.Success)
        {
            _toastService.ShowSuccess(result.Message);
            await OnInitializedAsync();
        }
        else
        {
            _toastService.ShowError(result.Message);
        }
    }
    private async Task DeleteCoupon(int couponId)
    {
        var result = await _couponService.Delete(couponId);
        if (result.Success)
        {
            _toastService.ShowSuccess(result.Message);
            await OnInitializedAsync();
        }
        else
        {
            _toastService.ShowError(result.Message);
        }
    }
    private async Task AddCoupon()
    {
        _navigationManager.NavigateTo("/admin/couponadd");
    }
    private void AddProduct(int id)
    {
        _navigationManager.NavigateTo($"/admin/category/{id}");
    }


}
